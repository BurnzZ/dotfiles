# terminal color scheme
export CLICOLOR=1
export LSCOLORS=ExFxCxDxBxegedabagacad

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${blue}${s}";
	else
		return;
	fi;
}

#------------------------------------
# BurnzZ's poging poging prompt
#------------------------------------

function cd {
    builtin cd "$@" # call default `cd`
    update_prompt
}

function update_prompt {

    PS1='\n'                           # new line
    PS1+='\[\e[1;36m\]┌─[\[\e[0m\]'    # L-pipe [
    PS1+='\[\e[1;35m\]\t \d\[\e[0m\]'  # time date
    PS1+='\[\e[1;36m\]]─[\[\e[0m\]'    # ]-[
    PS1+='\[\e[1;32m\]\u\[\e[0m\]'     # username
    PS1+='\[\e[1;36m\]@\[\e[0m\]'      # @
    PS1+='\[\e[1;33m\]\h\[\e[0m\]'     # host
    PS1+='\[\e[1;36m\]]─[\[\e[0m\]'    # ]-[

    if [[ `pwd` =~ /main ]]; then
        PS1+='\[\e[48;5;88m\]\w\[\e[0m\]' # pwd in red
    elif [[ `pwd` =~ /dev ]]; then
        PS1+='\[\e[48;5;28m\]\w\[\e[0m\]' # pwd in white-text and green-bg
    else
        PS1+='\[\e[1;34m\]\w\[\e[0m\]'    # pwd in blue-text
    fi

    PS1+='\[\e[1;36m\]]\[\e[0m\]'      # ]
    PS1+="\$(prompt_git \" \")";       # Git repository details
    PS1+='\n'                          # new line
    PS1+='\[\e[1;36m\]└▶[\[\e[0m\]'    # pretty arrow [
    PS1+='\[\e[1;37m\]\$\[\e[0m\]'     # dollar sign
    PS1+='\[\e[1;36m\]] \[\e[0m\]'     # ] space
    PS1+='\[\e[1;32m\]' 
    trap 'printf "\e[0m" "$_"' DEBUG
    export PS1;

    PS2="\[${yellow}\]→ \[${reset}\]";
    export PS2;
}

update_prompt
